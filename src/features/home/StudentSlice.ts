import { createAsyncThunk, createEntityAdapter, createSlice } from '@reduxjs/toolkit';
import axios from 'axios';

import { RootState } from '../../app/store';
import { Status } from '../../enum/requestStatus';
import Student from './model/student';
import { StudentResponse } from './response/student';
import { ResponsePayload } from './../../interfaces/api';


export interface StudentState {
  status?: Status.IDLE | Status.ERROR | Status.PENDING | Status.SUCCESS;
}

const initialState: StudentState = {
  status:  Status.IDLE,
};

export const getStudents = createAsyncThunk(
  'getStudents',
  async () => {
    const response = await axios.get<ResponsePayload<StudentResponse[]>>('/api/students');
    return response.data
  }
);

const studentAdapter = createEntityAdapter<Student>({
  selectId: (instance) => instance.id,
});

export const studentSlice = createSlice({
  name: 'home',
  initialState: studentAdapter.getInitialState(initialState),
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getStudents.pending, (state) => {
        state.status = Status.PENDING;
      })
      .addCase(getStudents.fulfilled, (state, action) => {
        const { results } = action.payload;

        const students = results.map((student) => new Student(student));

        studentAdapter.setAll(state, students);
        state.status = Status.SUCCESS;
      })
      .addCase(getStudents.rejected, (state, action) => {
        state.status = Status.ERROR;
      })
  },
});

export const { selectAll: selectStudents } = studentAdapter.getSelectors(
  (state: RootState) => state.student);

export default studentSlice.reducer;
