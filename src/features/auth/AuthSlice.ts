import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import axios from 'axios';

import { AppThunkAction, RootState } from '../../app/store';
import { Status } from '../../enum/requestStatus';
import { FormData, Error } from './type';

export interface UserState {
  userName: string;
  email: string;
  status?: Status.IDLE | Status.ERROR | Status.PENDING | Status.SUCCESS;
  errors?: Error[];
}

const initialState: UserState = {
  userName: '',
  email: '',
  status:  Status.IDLE,
  errors: [],
};

export const submitLogin =
  (user: FormData): AppThunkAction =>
  async (dispatch) => {
    try {
      const { email, password } = user; 
      const response = await axios.post('/api/users/login', { email, password });
      console.log(response);
      setSession(response?.data?.access_token);
      return dispatch(loginSuccess(response.data.user));
    } catch (error: any) {
     dispatch(loginError(error?.response?.data));
    }
  };

export const authSlice = createSlice({
  name: 'login',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    loginSuccess: (state, action: PayloadAction<UserState>) => {
      const { payload } = action;
      state.status = Status.SUCCESS;
      state.email = payload.email;
      state.userName = payload.userName;
    },
    loginError: (state, action) => {
      const { payload } = action;
      state.status = Status.ERROR;
      state.errors = payload.error;
    },
    logout: (state, action) => {
      console.log('qttttt');
      setSession('');
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
  },
});
export const { loginSuccess, loginError, logout } = authSlice.actions;

export const selectErrors = (state: RootState) => state.auth.errors;
export const selectStatus = (state: RootState) => state.auth.status;

export default authSlice.reducer;

function setSession(accessToken: string) {
  
  if (accessToken && accessToken !== '') {
    localStorage.setItem('jwt_access_token', accessToken);

    axios.defaults.headers.common.Authorization = `Bearer ${accessToken}`;
  } else {
    console.log("qqqq");
    localStorage.removeItem('jwt_access_token');

    delete axios.defaults.headers.common.Authorization;
  }

}
