import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';

type FormData = {
  email: string
  password: string
}

export interface AuthState {
  userName: string;
  password: string;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: AuthState = {
  userName: '',
  password: '',
  status: 'idle',
};

export const submitLogin = createAsyncThunk(
  'login',
  async (user: FormData) => {
    console.log(user)
    // const response = await fetchCount(amount);
    // // The value we return becomes the `fulfilled` action payload
    // return response.data;
  }
);

export const authSlice = createSlice({
  name: 'login',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(submitLogin.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(submitLogin.fulfilled, (state, action) => {
        state.status = 'idle';
      })
      .addCase(submitLogin.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export default authSlice.reducer;